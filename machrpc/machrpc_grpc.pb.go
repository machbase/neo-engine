// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: machrpc.proto

package machrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MachbaseClient is the client API for Machbase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachbaseClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Append(ctx context.Context, opts ...grpc.CallOption) (Machbase_AppendClient, error)
	QueryRow(ctx context.Context, in *QueryRowRequest, opts ...grpc.CallOption) (*QueryRowResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	RowsFetch(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsFetchResponse, error)
	RowsClose(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsCloseResponse, error)
}

type machbaseClient struct {
	cc grpc.ClientConnInterface
}

func NewMachbaseClient(cc grpc.ClientConnInterface) MachbaseClient {
	return &machbaseClient{cc}
}

func (c *machbaseClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/machrpc.Machbase/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Append(ctx context.Context, opts ...grpc.CallOption) (Machbase_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Machbase_ServiceDesc.Streams[0], "/machrpc.Machbase/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &machbaseAppendClient{stream}
	return x, nil
}

type Machbase_AppendClient interface {
	Send(*AppendRequest) error
	CloseAndRecv() (*AppendResponse, error)
	grpc.ClientStream
}

type machbaseAppendClient struct {
	grpc.ClientStream
}

func (x *machbaseAppendClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *machbaseAppendClient) CloseAndRecv() (*AppendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *machbaseClient) QueryRow(ctx context.Context, in *QueryRowRequest, opts ...grpc.CallOption) (*QueryRowResponse, error) {
	out := new(QueryRowResponse)
	err := c.cc.Invoke(ctx, "/machrpc.Machbase/QueryRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/machrpc.Machbase/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) RowsFetch(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsFetchResponse, error) {
	out := new(RowsFetchResponse)
	err := c.cc.Invoke(ctx, "/machrpc.Machbase/RowsFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) RowsClose(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsCloseResponse, error) {
	out := new(RowsCloseResponse)
	err := c.cc.Invoke(ctx, "/machrpc.Machbase/RowsClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachbaseServer is the server API for Machbase service.
// All implementations must embed UnimplementedMachbaseServer
// for forward compatibility
type MachbaseServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Append(Machbase_AppendServer) error
	QueryRow(context.Context, *QueryRowRequest) (*QueryRowResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	RowsFetch(context.Context, *RowsHandle) (*RowsFetchResponse, error)
	RowsClose(context.Context, *RowsHandle) (*RowsCloseResponse, error)
	mustEmbedUnimplementedMachbaseServer()
}

// UnimplementedMachbaseServer must be embedded to have forward compatible implementations.
type UnimplementedMachbaseServer struct {
}

func (UnimplementedMachbaseServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedMachbaseServer) Append(Machbase_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedMachbaseServer) QueryRow(context.Context, *QueryRowRequest) (*QueryRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRow not implemented")
}
func (UnimplementedMachbaseServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMachbaseServer) RowsFetch(context.Context, *RowsHandle) (*RowsFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsFetch not implemented")
}
func (UnimplementedMachbaseServer) RowsClose(context.Context, *RowsHandle) (*RowsCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsClose not implemented")
}
func (UnimplementedMachbaseServer) mustEmbedUnimplementedMachbaseServer() {}

// UnsafeMachbaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachbaseServer will
// result in compilation errors.
type UnsafeMachbaseServer interface {
	mustEmbedUnimplementedMachbaseServer()
}

func RegisterMachbaseServer(s grpc.ServiceRegistrar, srv MachbaseServer) {
	s.RegisterService(&Machbase_ServiceDesc, srv)
}

func _Machbase_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machrpc.Machbase/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MachbaseServer).Append(&machbaseAppendServer{stream})
}

type Machbase_AppendServer interface {
	SendAndClose(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type machbaseAppendServer struct {
	grpc.ServerStream
}

func (x *machbaseAppendServer) SendAndClose(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *machbaseAppendServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Machbase_QueryRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).QueryRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machrpc.Machbase/QueryRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).QueryRow(ctx, req.(*QueryRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machrpc.Machbase/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_RowsFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).RowsFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machrpc.Machbase/RowsFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).RowsFetch(ctx, req.(*RowsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_RowsClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).RowsClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machrpc.Machbase/RowsClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).RowsClose(ctx, req.(*RowsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

// Machbase_ServiceDesc is the grpc.ServiceDesc for Machbase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Machbase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "machrpc.Machbase",
	HandlerType: (*MachbaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Machbase_Exec_Handler,
		},
		{
			MethodName: "QueryRow",
			Handler:    _Machbase_QueryRow_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Machbase_Query_Handler,
		},
		{
			MethodName: "RowsFetch",
			Handler:    _Machbase_RowsFetch_Handler,
		},
		{
			MethodName: "RowsClose",
			Handler:    _Machbase_RowsClose_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _Machbase_Append_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "machrpc.proto",
}
